- content_for :header do
  %h1 View Challenge
.box
  %h2 View Game!
  .board{:style => "width: 365px; margin: auto"}
    - 7.times do |x|
      .space{:class => "position#{x}", :style => "border: 1px solid black; width: 50px; height: 50px; float: left;"}
  %div{:style => "clear: both;"}
  .choices{:style => "width: 75%; margin:auto"}
.column
  .box.p1.player
    .pair
    .character
.column
  .box.p2.player
    .pair
    .character
.box.log{:style => "clear: both;"}
.img-cache{:style => "display: none;"}

:javascript
  var interval;
  var statements = 0;
  var prevData = {}
  
  function setLog(log) {
    $log = $('.log').html("<p>" + log.join("</p><p>") + "</p>")
  }
  
  function imgElementFor(imgName) {
    img = $('img .card.' + imgName)
    if (img.length == 0) {
      img = $("<img src='/assets/cards/" + imgName + ".png' class='card " + imgName + "'></img>")
      img.appendTo($('.img-cache'));
    }
    return img;
  }
  
  function imageFor(n) {
    return "<img src='/assets/cards/" + n + ".png' class='card'></img>"
  }
  
  function setPlayer(name,location,data) {
    var val = ""
    val = val + "<p>Name: " + name + "</p>"
    val = val + "<p>Life: " + data.life + "</p>"
    
    val = val + "<p>Forms:"
    for (var i = 0; i < data.forms.length; i+=1) {
      val = val + "<span class='hoverable'>" + data.forms[i] + " <span class='hover'>" + imageFor(data.forms[i]) + "</span></span>"
    }
    val = val + "</p>"
    
    val = val + "<p>Bases:"
    for (var i = 0; i < data.bases.length; i+=1) {
      val = val + "<span class='hoverable'>" + data.bases[i] + " <span class='hover'>" + imageFor(data.bases[i]) + "</span></span>"
    }
    val = val + "</p>"
    
    
    val = val + "<p>Current Power: " + data.power + "</p>"
    val = val + "<p>Current Range: " + data.range + "</p>"
    val = val + "<p>Current Priority: " + data.priority + "</p>"
    val = val + "<p>Stun Guard: " + data.stun_guard + "</p>"
    val = val + "<p>Soak: " + data.soak + "</p>"
    val = val + "<p>Stun immunity: " + data.stun_immunity + "</p>"
    location.find('.character').html(val)

    if (data.base) {
      $pair = location.find('.pair')
      $pair.show();
      $pair.find('img').detach().appendTo('.img-cache')
      // This should, instead, see if we have an element for that base
      imgElementFor(data.form).detach().appendTo($pair)
      imgElementFor(data.base).detach().appendTo($pair)
      
      var base_image = imageFor(data.base)
      var form_image = imageFor(data.form)
      location.find('.pair').html(form_image + base_image);
    } else {
      location.find('.pair').hide();
    }
    
    $('.board .position' + data.position).text(name)
  }
  function clearChoices() {
    $('.choices').html('');
  }
    
  function setChoices(choices) {
    var val = ''
    for(var i = 0; i < choices.length; i++) {
      val += "<a href='#'>" + choices[i] + "</a> " 
    }
    $('.choices').html(val);
    $('.choices a').click(function(){
      inp($(this).text());
    })
  }
  function loadData(data) {
    if (data.number != prevData.number){
      $('.board .space').text('')
      if (data.p1) {
        setPlayer('p1',$('.p1'),data.p1)
        setPlayer('p2',$('.p2'),data.p2)
      }
      setLog(data.log);
      if (data.pending_input) {
        setChoices(data.pending_input);
      } else {
        clearChoices();
      }
      if (data.winner) {
        console.log("Finished game.")
        $('.' + data.winner).addClass('winner').prepend("<h2>Winner!<h2>")
        $('.player:not(.winner)').prepend("<h2>Loser!<h2>")
        clearInterval(interval);
      } 
      prevData = data
    }
  }
  function refreshStatus() {
    $.get('#{@challenge.id}.json', {log: statements}, loadData)
  }
  function inp(x) {
    console.log("POSTING...");
    $.post(''
    , {input: x}
    , function(data){ 
      if (data.success) {
        loadData(data.game);
      }
    })
  }
  $(function(){
    interval = setInterval('refreshStatus();', 1000);
    refreshStatus();
  })